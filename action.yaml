name: 'Colvin Deploy PHP Projects'
description: 'Deploy Colvin PHP projects to Google Cloud'
runs:
  using: "composite"
  steps:
    - name: "Set ENV variables"
      run: |
        echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
        echo "STAGE=${GITHUB_REF##*/}" >> $GITHUB_ENV
        #echo "STAGE=${{ github.event.inputs.environment }}" >> $GITHUB_ENV   # When stage1 branch is not used
      shell: bash
      
    - name: "Validating environments"
      run: |
        REGEX="^stage[1-$LIMIT_STG]{1}$"
        if [[ ! $STAGE =~ $REGEX ]] && [ "$BRANCH" != "master" ]; then echo "ERROR: not allowed environment"; exit 1; fi
      shell: bash
      
    - name: "Get kubernetes credentials"
      run: |
        if [ $BRANCH == "master" ]; then
            gcloud container clusters get-credentials colvin --region $GCP_REGION
        else
            gcloud container clusters get-credentials stage --zone $GCP_ZONE
            if [ `kubectl get nodes -o json | jq '.items | length'` -eq 0 ]; then echo "ERROR: stage is stopped. Remember to start it!"; exit 1; fi
        fi
      shell: bash

    - name: "Terraform Init"
      run: if [ -d "./terraform" ]; then terraform init -backend-config="credentials=`echo $SA_GCP`" -backend-config="prefix=`echo $APP_NAME`" -input=false terraform/; fi
      shell: bash

    - name: "Terraform Workspace"
      run: |
        if [ $BRANCH == "master" ]; then
            if [ -d "./terraform" ]; then terraform workspace select colvin terraform/ || terraform workspace new colvin terraform/; fi
        else
            if [ -d "./terraform" ]; then terraform workspace select $STAGE terraform/ || terraform workspace new $STAGE terraform/; fi
        fi
      shell: bash
      
    - name: "Decrypt terraform encrypted values"
      run: if [ -f "./terraform/variables-encrypted.tf.enc" ]; then sops -d terraform/variables-encrypted.tf.enc > terraform/variables-encrypted.tf; fi
      shell: bash
      
    - name: "Terraform Plan"
      run: if [ -d "./terraform" ]; then terraform plan -var="client_secret=`echo $SA_GCP`" -var="app_name=`echo $APP_NAME`" terraform/; fi
      shell: bash

    - name: "Terraform Apply"
      run: if [ -d "./terraform" ]; then terraform apply -var="client_secret=`echo $SA_GCP`" -var="app_name=`echo $APP_NAME`" -auto-approve terraform/; fi
      shell: bash

    - name: "Get latest tag and auto increment version"
      run: |
        if [ $BRANCH == "master" ]; then
            LAST=`gcloud container images list-tags $IMG_PHP --sort-by="TAGS" --filter="tags~^[0-9]" | sed '/TIMESTAMP/d' | sort -rVk2 | head -n1 | awk '{print $2}'`
            REGEX="([0-9]+).([0-9]+)"
        else
            MAJOR_VERSION="s"$MAJOR_VERSION
            LAST=`gcloud container images list-tags $IMG_PHP --sort-by="TAGS" --filter="tags~^s[0-9]" | sed '/TIMESTAMP/d' | sort -rVk2 | head -n1 | awk '{print $2}'`
            REGEX="(s[0-9]+).([0-9]+)"
        fi
        if [[ $LAST =~ $REGEX ]]; then MAJOR="${BASH_REMATCH[1]}"; MINOR="${BASH_REMATCH[2]}"; fi
        if [ -z $MAJOR ]; then MAJOR="1"; MINOR="0"; fi
        if [ $MAJOR_VERSION != $MAJOR ]; then MAJOR=$MAJOR_VERSION; MINOR="1"; else MINOR=$(echo $MINOR + 1 | bc); fi
        echo "TAG_PHP=$MAJOR.$MINOR" >> $GITHUB_ENV
      shell: bash

    - name: "Build docker images"
      run: |
        export PHP_IMAGE="$IMG_PHP:$TAG_PHP"
        if [ $BRANCH == "master" ]; then
          docker-compose build --build-arg INSTALL_DATADOG=true --build-arg INSTALL_BLACKFIRE=true $CONTAINER_NAME
        else
          docker-compose build $CONTAINER_NAME
        fi
      shell: bash

    - name: "Configure docker-cli to push images in GCR"
      run: gcloud auth configure-docker
      shell: bash

    - name: "Push docker images to GCR"
      run: docker push $IMG_PHP:$TAG_PHP
      shell: bash

    - name: "Replace php version in helm values.yaml"
      run: sed -i "s/TAG_PHP/$TAG_PHP/g" $SRC_PATH/helm/$APP_NAME/values.yaml $SRC_PATH/helm/$APP_NAME/values.prod.yaml
      shell: bash

    - name: "Install Helm secrets plugin"
      run: helm plugin install https://github.com/zendesk/helm-secrets
      shell: bash

    - name: "Helm dependencies update"
      run: helm dependency update $SRC_PATH/helm/$APP_NAME/
      shell: bash

    - name: "Deploy Helm"
      run: |
        if [ $BRANCH == "master" ]; then
            helm secrets upgrade $APP_NAME $SRC_PATH/helm/$APP_NAME/ --install --wait --atomic -f=$SRC_PATH/helm/$APP_NAME/values.yaml -f=$SRC_PATH/helm/$APP_NAME/values.prod.yaml -f=$SRC_PATH/helm/$APP_NAME/secrets.yaml -f=$SRC_PATH/helm/$APP_NAME/secrets.prod.yaml
        else
            helm secrets upgrade $APP_NAME $SRC_PATH/helm/$APP_NAME/ --install --wait --atomic -f=$SRC_PATH/helm/$APP_NAME/values.yaml -f=$SRC_PATH/helm/$APP_NAME/secrets.yaml
        fi
      shell: bash
